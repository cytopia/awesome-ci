#!/usr/bin/env bash
set -u

############################################################
# Adjust for each check
############################################################

# Name and messages
MY_NAME="git-ignored"
MY_DESC="Scans your git repository for ignored files still present in git cache."
MY_FINISH_OK="No ignored files within git cache."
MY_FINISH_ERR="Found ignored files in git cache."

# Custom required binaries
REQUIRED_CUST_BINS="git"

# How to check for files
# Note: '%' comes from xargs and represents
# one file as parameter.
# Called like this:
#   eval "xargs -I % sh '${MY_CHECK}'"
MY_CHECK="git ls-files --ignored --exclude-standard 2>&1 || true"

# Command to be displayed for --info
MY_INFO="git --version"






############################################################
# Do not edit from here
############################################################

#
# Version
#
MY_VERSION="0.15"
MY_DATE="2018-04-09"

#
# Credits
#
MY_AUTHOR="cytopia"
MY_EMAIL="cytopia@everythingcli.org"

#
# Required system binaries
#
REQUIRED_BINS="sed"

#
# Variables populated by cmd args or config file
#
MY_PATH=
MY_DRY=0
MY_LST=0
MY_DEB=0

CLR_SUC="\033[0;32m"
CLR_ERR="\033[0;31m"
CLR_CLS="\033[0m"


################################################################################
#
#  F U N C T I O N S
#
################################################################################

print_usage() {

	echo "Usage: ${MY_NAME} [--debug] [--dry] [--list] --path=dir"
	echo "       ${MY_NAME} --info"
	echo "       ${MY_NAME} --help"
	echo "       ${MY_NAME} --version"
	echo
	echo "${MY_DESC}"
	echo "Will return 1 on occurance, otherwise 0."
	echo
	echo "Required arguments:"
	echo "  --path=            Specify directory where to scan."
	echo
	echo
	echo "Optional run arguments:"
	echo "  --debug            Print system messages."
	echo
	echo
	echo "Optional training arguments:"
	echo "  --dry              Don't do anything, just display the commands."
	echo
	echo "  --list             Instead of searching inside the files, just display the filenames"
	echo "                     that would be found by --path, --extension and --ignore"
	echo
	echo "System arguments:"
	echo "  --info             Show command version."
	echo "  --help             Show help screen."
	echo "  --version          Show version information."
	echo
	echo
	echo "${MY_NAME} is part of the awesome-ci collection."
	echo "https://github.com/cytopia/awesome-ci"
}

print_version() {
	echo "tool:    ${MY_NAME}"
	echo "version: v${MY_VERSION} (${MY_DATE})"
	echo "author:  ${MY_AUTHOR}"
	echo "email:   ${MY_EMAIL}"
	echo
	echo "${MY_NAME} is part of the awesome-ci collection."
	echo "https://github.com/cytopia/awesome-ci"
}

check_requirements() {
	_debug="${1}"
	_ret1=0
	_ret2=0

	# System binaries
	for _bin in ${REQUIRED_BINS}; do
		if ! command -v "${_bin}" >/dev/null 2>&1; then
			echo "[ERR] Required sys binary '${_bin}' not found."
			_ret1=1
		else
			if [ "${_debug}" = "1" ]; then
				echo "[OK]  Required system binary '${_bin}' found."
			fi
		fi
	done

	# Specific binaries for this check
	for _bin in ${REQUIRED_CUST_BINS}; do
		if ! command -v "${_bin}" >/dev/null 2>&1; then
			echo "[ERR] Required custom binary '${_bin}' not found."
			_ret2=1
		else
			if [ "${_debug}" = "1" ]; then
				echo "[OK]  Required custom binary '${_bin}' found."
			fi
		fi
	done

	return $((_ret1 + _ret2))
}



################################################################################
#
#  M A I N   E N T R Y   P O I N T
#
################################################################################



############################################################
# Command Line arguments
############################################################


#
# Read command line arguments
#
while [ $# -gt 0  ]; do
	case "${1}" in

		# ----------------------------------------
		--path=*)
			MY_PATH="$( echo "${1}" | sed 's/--path=//g' )"
			;;

		# ----------------------------------------
		--dry)
			MY_DRY=1
			;;

		# ----------------------------------------
		--list)
			MY_LST=1
			;;

		# ----------------------------------------
		--debug)
			MY_DEB=1
			;;

		# ----------------------------------------
		--info)
			echo "\$ ${MY_INFO}"
			eval "${MY_INFO}"
			exit 0
			;;

		# ----------------------------------------
		--help)
			print_usage
			exit 0
			;;

		# ----------------------------------------
		--version)
			print_version
			exit 0
			;;

		# ----------------------------------------
		*)
			echo "Invalid argument: ${1}"
			echo "Type '${MY_NAME} --help' for available options."
			exit 1
			;;
	esac
	shift
done



############################################################
# Sanity Checks
############################################################

#
# Check general requirements
#
if ! check_requirements "${MY_DEB}"; then
	exit 1
fi

#
# Check path
#
if [ "${MY_PATH}" = "" ]; then
	echo "--path not specified"
	echo "Type '${MY_NAME} --help' for available options."
	exit 1
fi
if [ ! -e "${MY_PATH}" ]; then
	echo "Specified path does not exist: '${MY_PATH}'."
	echo "Type '${MY_NAME} --help' for available options."
	exit 1
fi





############################################################
# Execute
############################################################

# Dry mode?
if [ "${MY_DRY}" = "1" ]; then
	echo "\$ ${MY_CHECK}"
	exit 0
fi

echo "\$ ${MY_CHECK}"

output="$(eval "cd ${MY_PATH} && ${MY_CHECK}")"

# If showing files only, exit normally
if [ "${MY_LST}" = "1" ]; then
	echo "${output}"
	exit 0
fi


if [ "${MY_FIX}" = "1" ]; then
	printf "%s\n" "${output}"

	if [[ $output =~ ^FAILED\s: ]]; then
		printf "${CLR_ERR}[ERR] %s${CLR_CLS}\n" "${MY_FINISH_ERR}"
		exit 1
	else
		printf "${CLR_SUC}[OK]  %s${CLR_CLS}\n" "${MY_FINISH_OK}"
		exit 0
	fi
fi

if [ "${output}" != "" ]; then
	printf "%s\n" "${output}"
	printf "${CLR_ERR}[ERR] %s${CLR_CLS}\n" "${MY_FINISH_ERR}"
	exit 1
else
	printf "${CLR_SUC}[OK]  %s${CLR_CLS}\n" "${MY_FINISH_OK}"
	exit 0
fi
